#==================================================================================
#Statement of the problem
'''
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
'''
#===================================================================================

#import modules

import numpy as np

# define function
def fibonacci_sum(end,mode):
    """
    This function will calculate the sum of all the even/odd numbers in the Fibonacci series

    Arguments:
        end -- (integer) final value before the "end" value of the Fibonacci series 
        mode -- (string) sum to perform on the values (default is even)    
    
    
    Returns:
        total -- sum of the even(odd) Fibonacci series.
    """
    total = 0
    num_prev = 1
    num_next = 2
    
    if (mode == "even"):
        while num_prev < end:
            if (num_prev % 2 == 0):
                total += num_prev
            else:
                total = total
            num_prev,num_next = num_next, num_prev + num_next    
    if (mode == "odd"):
        while num_prev < end:
            if (num_prev % 2 == 0):
                total = total
            else:
                total += num_prev    
            num_prev,num_next = num_next, num_prev + num_next
    
    return total
    


if __name__ == "__main__":
    print (f'Sum is = {fibonacci_sum(end = 4000000,mode = "even")}')

 
